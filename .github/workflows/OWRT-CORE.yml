#云编译公用核心
name: OWRT-CORE

on:
  #公用核心标识
  workflow_call:
    inputs:
      OWRT_TARGET:
        required: true
        type: string
      OWRT_THEME:
        required: true
        type: string
      OWRT_NAME:
        required: true
        type: string
      OWRT_URL:
        required: true
        type: string
      OWRT_PW:
        required: true
        type: string
      OWRT_IP:
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  OWRT_TARGET: ${{inputs.OWRT_TARGET}}
  OWRT_THEME: ${{inputs.OWRT_THEME}}
  OWRT_NAME: ${{inputs.OWRT_NAME}}
  OWRT_URL: ${{inputs.OWRT_URL}}
  OWRT_PW: ${{inputs.OWRT_PW}}
  OWRT_IP: ${{inputs.OWRT_IP}}

jobs:
  owrt_core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E rm -rf $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "1{s/\r$//;p;q}")
          sudo -E apt -yqq update
          sudo -E apt -yqq purge $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "2{s/\r$//;p;q}")
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq install $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "3{s/\r$//;p;q}")
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialization Values
        run: |
          export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export OWRT_SOURCE=$(echo $OWRT_URL | cut -d '/' -f 5-)
          export OWRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Config/$mtwifi-cfg.config)

          echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV

          echo "OWRT_URL=$OWRT_URL" >> $GITHUB_ENV
          echo "OWRT_NAME=$OWRT_NAME" >> $GITHUB_ENV
          
          echo "OWRT_TARGET=$OWRT_TARGET" >> $GITHUB_ENV
          echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV
          echo "OWRT_TYPE=$OWRT_TYPE" >> $GITHUB_ENV
          echo "OWRT_PW=$OWRT_PW" >> $GITHUB_ENV
          echo "OWRT_IP=$OWRT_IP" >> $GITHUB_ENV
          

      - name: Check Scripts
        run: |
          cd ./Scripts

          dos2unix ./*.sh
          chmod +x ./*.sh

      - name: Clone OWRT Code
        run: |
          git clone $OWRT_URL ./owrt
          
      - name: Load custom feeds
        run: |
          rm -rf ./feeds.conf.default
          cat $GITHUB_WORKSPACE/Config/feeds.conf.default >> feeds.conf.default
      - name: 自定义脚本
        run: |
          cd ./owrt
          #自定义插件
          $GITHUB_WORKSPACE/Scripts/diy-pa.sh

      - name: Update Feeds
        run: |
          cd ./owrt
          ./scripts/feeds update -a && ./scripts/feeds install -a
          ##istore包
          echo >> feeds.conf.default
          #echo 'src-git helloworld https://github.com/fw876/helloworld;master' >> feeds.conf.default
          echo 'src-git istore https://github.com/linkease/istore;main' >> feeds.conf.default
          ./scripts/feeds update istore
          ./scripts/feeds install -d y -p istore luci-app-store
          echo 'src-git nas https://github.com/linkease/nas-packages.git;master' >> feeds.conf.default
          echo 'src-git nas_luci https://github.com/linkease/nas-packages-luci.git;main' >> feeds.conf.default
          ./scripts/feeds update nas nas_luci
          ./scripts/feeds install -a -p nas
          ./scripts/feeds install -a -p nas_luci
          rm -rf feeds/packages/lang/golang
          git clone https://github.com/sbwml/packages_lang_golang -b 20.x feeds/packages/lang/golang
          ./scripts/feeds update -a && ./scripts/feeds install -a 

      - name: Custom Scripts
        run: |
          cd ./owrt

          $GITHUB_WORKSPACE/Scripts/Settings.sh
          cd ./package
          $GITHUB_WORKSPACE/Scripts/Plugins.sh

      - name: Custom Settings
        run: |
          cd ./owrt

          rm -rf ./tmp* ./.config*
          
          ##配置文件
          cat $GITHUB_WORKSPACE/Config/mtwifi-cfg.config >> .config
          
          #cat $GITHUB_WORKSPACE/Config/237.txt >> .config
          
          

          $GITHUB_WORKSPACE/Scripts/Extras.sh


      - name: 设置使用 nx30pro eeprom
        run: |
          mkdir owrt/target/linux/mediatek/mt7981/base-files/lib/firmware
          cp eeprom/nx30pro_eeprom.bin owrt/target/linux/mediatek/mt7981/base-files/lib/firmware/MT7981_iPAiLNA_EEPROM.bin
          sed -i 's/caldata_extract_mmc/# caldata_extract_mmc/' owrt/target/linux/mediatek/mt7981/base-files/lib/preinit/90_extract_caldata
          sed -i 's#./files/mt7981-default-eeprom/MT7981_iPAiLNA_EEPROM.bin##' owrt/package/mtk/drivers/mt_wifi/Makefile
          
      - name: Cleanup Toolchain
        run: |
          cd ./owrt

          make dirclean

      - name: Download Packages
        run: |
          cd ./owrt
          make defconfig

          make download -j$(nproc)

      - name: Compile Firmware
        run: |
          cd ./owrt

          make -j$(nproc) || make -j1 V=s

          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./owrt && mkdir ./upload

          rm -rf $(find ./bin/targets/ -iregex ".*\(json\|manifest\|buildinfo\|sha256sums\|packages\)$")
          cp -rf $(find ./bin/targets/ -type f -iname "*.*") ./upload/
          cp -rf ./.config ./upload/Config_"$OWRT_TARGET"_"$OWRT_SOURCE"_"$OWRT_DATE".txt

          cd ./upload

          $GITHUB_WORKSPACE/Scripts/Renames.sh

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.OWRT_NAME}}_${{env.OWRT_DATE}}
          files: ./owrt/upload/*.*
          body: |

            
            RAX3000M 自用固件 ！
            
            源码：${{env.OWRT_URL}}
            平台：${{env.OWRT_TARGET}}
            设备：${{env.OWRT_NAME}}
            密码：${{env.OWRT_PW}}
            地址：${{env.OWRT_IP}}

      - name: Delete Old Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 6
          delete_tags: true

      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 1
